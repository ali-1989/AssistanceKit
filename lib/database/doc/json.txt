==================================================================================================================
Help:

    [https://www.postgresql.org/docs/9.4/functions-json.html]
	[https://www.idalko.com/crud-operations-postgres-jsonb/]
    [https://scalegrid.io/blog/using-jsonb-in-postgresql-how-to-effectively-store-index-json-data-in-postgresql/]


* '{}' is array type in postgres. if you use JSONB, use regular '[]' for array
-------------------------------------
join JSONB:

SELECT jsonb '{"a":1}' || jsonb '{"b":2}';    -- will yield jsonb '{"a":1,"b":2}'
SELECT jsonb '["a",1]' || '["b",2]'::jsonb;    -- will yield jsonb '["a",1,"b",2]'
-------------------------------------
=====================================================================================
# get type of data:

SELECT pg_typeof(healthConditionJs->'front') FROM "UserData";
............................................
SELECT pg_typeof(ARRAY(select healthConditionJs->'IllList')) FROM "UserPersonalData" where userid = 1;          jsonb[]
or
SELECT pg_typeof(ARRAY(select healthConditionJs->'IllList')::jsonb[]) FROM "UserPersonalData" where userid = 2; jsonb[]
=====================================================================================
JSONB column to JSONB[] rows:

SELECT ARRAY(SELECT healthConditionJs->'IllList') from "UserPersonalData";
or
SELECT ARRAY(SELECT healthConditionJs->'IllList')::jsonb[] FROM "UserPersonalData";
-----------------------------------------------------
* split array in json:

SELECT HealthConditionJs->'IllList'->1 FROM "UserPersonalData" WHERE userid = 2;

SELECT arr.c1 FROM "UserPersonalData" AS r, jsonb_array_elements(r.HealthConditionJs->'IllList') arr (c1);
......................
SELECT arr.c1 FROM "UserFitnessData" AS r, jsonb_array_elements(r.Nodes->'FrontImage') arr (c1);

is equal:

SELECT jsonb_array_elements(Nodes->'FrontImage') arr FROM "UserFitnessData";
=====================================================================================
ARRAY:

SELECT * FROM FoodMaterial WHERE id =2 and EXISTS (SELECT FROM jsonb_array_elements(fundamentals_js) as e where e ?& array['calories', 'fat', 'protein', 'carbohydrate']);

SELECT * FROM FoodMaterial where id =2 and fundamentals_js @? '$ ? (exists (@."fat"))';
=====================================================================================
# insert full a list node:

insert into "UserFitnessData" (userid, nodes) values (1, '{"WeightNode": [{"date": null, "value": 10}]}'::jsonb);
or
insert into "UserFitnessData" (userid, nodes) values (1, '{"WeightNode": [{"date": null, "value": 10}]}');
=====================================================================================
jsonb_set:

	[https://www.freecodecamp.org/news/how-to-update-objects-inside-jsonb-arrays-with-postgresql-5c4e03be256a/]

* jsonb_set(target jsonb, path text[], new_value jsonb [, create_missing boolean])

* All the items of the path parameter of jsonb_set must be present in the target,
  unless create_missing is true, in which case all but the last item must be present.

* path can contain JSON array indexes too & negative integers that appear there count from the end of JSON arrays.
  However, a non-existing, but positive JSON array index will append the element to the end of the array.

SELECT jsonb_set('[]', '{index, key}','["new", "values"]')
SELECT jsonb_set('[{"f1": 1,"f2": null}, 2, null, 3]', '{0, f1}', '[2,3,4]', false)	=> [{"f1":[2,3,4],"f2":null},2,null,3]
SELECT jsonb_set('{"a": [null, {"b": []}]}',   '{a,1,b,0}',  jsonb '{"c":3}')     => {"a":[null,{"b":[{"c":3}]}]}
=====================================================================================
jsonb_insert:

jsonb_insert(target       jsonb,
             path         text[],
             new_value    jsonb,
             insert_after boolean default false)

*  negative integers that appear in path count from the end of JSON arrays.

SELECT jsonb_insert('{"a" :[null, {"b":[1]}]}', '{a,1,b,0}', jsonb '2')        =>  '{"a":[null,{"b":[2,1]}]}'
SELECT jsonb_insert('{"a" :[null, {"b":[1]}]}', '{a,1,b,0}', jsonb '2', true)  => '{"a":[null,{"b":[1,2]}]}'
........................................................
SELECT jsonb_insert(xyz, '{foo,bar}', '{"done": true}'::jsonb) FROM tb;







UPDATE:
=====================================================================================
update key:

UPDATE tb SET data = jsonb_set(data, '{name}', '"newName"');
UPDATE tb SET data = data || '{"name": "newValue"}';

UPDATE tb SET data = jsonb_set(data, '{name, first}', '"newName"');
UPDATE tb SET data = data || '{"name": {"first": "newValue"}}';
---------------------------------------------------
update path:

UPDATE tb SET settings = jsonb_set(settings, '{moduleSettings, employee, enable}', 'yes')
 WHERE id = 1;
---------------------------------------------------
add key:

UPDATE tb SET data = data || '{"city": "ottawa", "phone": "phoneNum"}';


UPDATE tb SET data = jsonb_set(data, '{location}',
		data->'location' || '{"city": "ottawa", "phone": "phoneNum"}')
---------------------------------------------------
update(replace) array:

UPDATE tb SET data = jsonb_set(data, '{tags}', '["tag3", "tag4"]');
---------------------------------------------------
array REPLACE by index:

UPDATE tb SET data = jsonb_set(data, '{tags, 0}', '"tag5"', false)
UPDATE tb SET data = jsonb_set(data, '{tags, 1}', '"tag6"', false)
---------------------------------------------------
array APPEND:

by index:

UPDATE tb SET data = jsonb_set(data, '{tags, 20}', '"tag20"', true);
SELECT jsonb_insert('{"a":[null,{"b":[1,2]}]}', '{a,1,b,-1}', jsonb '3', true);
...........
INSERT INTO "UserFitnessData" (UserId, Nodes)
    values (1, '{"FrontImage": [{"k":"val", "date": "..."}]}')
  ON CONFLICT (UserId) DO UPDATE
   SET Nodes = jsonb_set("UserFitnessData".Nodes, '{"FrontImage", 999}', '{"k": "val", "date": "..."}');

or

INSERT INTO "UserFitnessData" (UserId, Nodes)
values (1, '{"FrontImage": [{"uri":"http://www.g.com","date":"2021-07-24 18:17:33.000"}]}')
ON CONFLICT (UserId) DO UPDATE
    SET Nodes = jsonb_set("UserFitnessData".Nodes, '{"FrontImage"}',
        "UserFitnessData".Nodes->'FrontImage' || '{"uri":"http://www.a.com","date":"2021-07-24 18:17:43.000"}');
---------------------------------------------------
Remove array item:

UPDATE tb SET data = data #- '{tags, -1}'
---------------------------------------------------
remove keys:

UPDATE tb SET data = data - '{"name", "tags"}'::text[] WHERE id = 1;
---------------------------------------------------
by convert to text: [is old]

UPDATE tb SET data = replace(data::TEXT,': "my-name"',': "my-other-name"')::jsonb  WHERE id = 1;
---------------------------------------------------
multi key update:

UPDATE "UserPersonalData" SET SportsEquipmentJs = jsonb_set(
        jsonb_set(COALESCE(SportsEquipmentJs, '{}'), '{GymTools}', '"newGym"'),
     '{HomeTools}', '"newData"')
    WHERE UserId = 1;

UPDATE "UserPersonalData" SET SportsEquipmentJs =
      "UserPersonalData".SportsEquipmentJs || '{"GymTools": "gg", "HomeTools": "hh" }'
    WHERE UserId = 1;
---------------------------------------------------
UPSERT:

INSERT INTO "UserPersonalData" (userid, SportsEquipmentJs)
    values (5, '{"GymTools": "g", "HomeTools": "h"}') ON CONFLICT (userid) DO UPDATE

    SET SportsEquipmentJs = jsonb_set(jsonb_set(COALESCE(EXCLUDED.SportsEquipmentJs, '{}'), '{GymTools}', '"newGym"'), '{HomeTools}', '"newData"');
.............................
INSERT INTO "UserPersonalData" as t1 (userid, SportsEquipmentJs)
    values (5, '{"GymTools": "g", "HomeTools": "h"}') ON CONFLICT (userid) DO UPDATE

    SET SportsEquipmentJs = jsonb_set(jsonb_set(COALESCE(t1.SportsEquipmentJs, '{}'), '{GymTools}', '"newGym"'), '{HomeTools}', '"newData"');
.............................
INSERT INTO "UserPersonalData" as t1 (userid, SportsEquipmentJs)
    values (5, '{"GymTools": "g", "HomeTools": "h"}') ON CONFLICT (userid) DO UPDATE

    SET SportsEquipmentJs = excluded.SportsEquipmentJs || '{"GymTools": "gg", "HomeTools": "hh" }';

---------------------------------------------------
BEGIN;
LOCK TABLE "UserPersonalData" IN EXCLUSIVE MODE;
do $$
    begin
        INSERT INTO "UserPersonalData" (userid, SportsEquipmentJs)
          values (6, '{"GymTools": "g", "HomeTools": "h"}');
      EXCEPTION WHEN unique_violation THEN
        UPDATE "UserPersonalData"
        SET SportsEquipmentJs = jsonb_set(jsonb_set(COALESCE(SportsEquipmentJs, '{}'), '{GymTools}', '"newGym"'), '{HomeTools}', '"newData"');
    end $$;

COMMIT;
---------------------------------------------------
UPDATE tb SET settings = jsonb_set(settings,
    '{enabledModules}',
    (settings ->'enabledModules')::jsonb -'discussion');
---------------------------------------------------
UPDATE tb SET
 jbCol = (CASE
        WHEN jbCol->'foo' IS NOT NULL
         THEN jsonb_set(jbCol, '{foo,bar}', '{"done":false}'::jsonb)
        WHEN jbCol->'foo' IS NULL
         THEN jsonb_insert(jbCol, '{foo}', '{"bar":{"done":true}}'::jsonb)
    END)
WHERE id=1;





Delete:
=====================================================================================
SELECT jsonb '{"a":1,"b":2}' - 'a';             -- will yield jsonb '{"b":2}'
SELECT jsonb '["a",1,"b",2]' - 1;               -- will yield jsonb '["a","b",2]'
SELECT '{"a":[null,{"b":[3]}]}' #- '{a,1,b,0}'  -- will yield jsonb '{"a":[null,{"b":[]}]}'

---------------------------------------------------------------------
delete by index:

UPDATE "UserFitnessData"
 SET Nodes = (SELECT jsonb_set(nodes, '{"FrontImage"}', Nodes->'FrontImage' #- '{0}') FROM "UserFitnessData" WHERE userid = 1)
 WHERE userid = 1;

is equal:

UPDATE "UserFitnessData"
   SET Nodes = Nodes #- '{"FrontImage", 0}' WHERE userid = 1;
................................................
UPDATE site_content
   SET content = content #- coalesce(('{playersContainer,players,' || (
            SELECT i
              FROM generate_series(0, jsonb_array_length(content->'playersContainer'->'players') - 1) AS i
             WHERE (content->'playersContainer'->'players'->i->'id' = '"2"')
         ) || '}')::text[], '{}');
---------------------------------------------------------------------






Select:
=====================================================================================
select Nodes->'WeightNode' from "UserFitnessData" where userid = 2;
---------------------------------------------------------
# select by index:

SELECT HealthConditionJs->'IllList'->1 FROM "UserPersonalData" WHERE userid = 2;

SELECT '{"a": {"b":{"c": "foo"}}}'::json #> '{a,b}'         =>	{"c": "foo"}
---------------------------------------------------------
Exist key:

SELECT '{"a":1, "b":2}'::jsonb ? 'b';                              => true
SELECT '{"a":1, "b":2, "c":3}'::jsonb ?| array['b', 'c'];          => true
SELECT '{"a":1, "b":2, "c":3}'::jsonb ?| array['b', 'd'];          => true
SELECT '{"a":1, "b":2, "c":3}'::jsonb ?& array['b', 'd'];          => false
---------------------------------------------------------
select *  from "UserData" where fitnessStatusList->'front' @> '[{"d1":"v1"}]';
select *  from "UserData" where fitnessStatusList ? 'back';
select *  from "UserData" where fitnessStatusList @> '{"front": [{"d1":"v1"}]}';
---------------------------------------------------------
SELECT DATA->'configurations' AS configs FROM tb WHERE (DATA->>'userid') = 'ihor@gmail.com';
---------------------------------------------------------

SELECT config AS congifuration FROM tb
  CROSS JOIN jsonb_array_elements(DATA->'configurations') AS config
  WHERE (DATA->>'userid') = 'x' AND (config->>'name') = 'y';
---------------------------------------------------
Path:

WHERE settings->'moduleSettings'->'employees'->>'enable'::text = 'true';

isequal

WHERE settings #>>'{moduleSettings,employees,enable}' = 'true';
---------------------------------------------------
Array:

where settings->'enabledModules'  @>  '["resources","discussion"]'::jsonb;
---------------------------------------------------
Select key with any value:

SELECT '{"book": {"title": "War and Peace"}}'::jsonb @> '{"book": {}}'::jsonb;
---------------------------------------------------
select * from "UserData" where
    ARRAY(select jsonb_array_elements(fitnessStatusList->'front'))::jsonb[] @> '[{"d1": "v1"}]'::jsonb[];

select *,jsonb_object_keys(unnest(ARRAY(select jsonb_array_elements(fitnessStatusList->'front'))::jsonb[])) from "UserData";

select * from (select *, jsonb_object_keys(jsonb_array_elements(fitnessStatusList->'front'))as k from "UserData")
    as sub1 where k = 'd1';

select * from
     (select *, jsonb_array_elements(fitnessStatusList->'front') as k from "UserData" group by userid) as sub1
    where sub1.k @> '{"d1":"v1"}';
=====================================================================================
Functions:
-----------
	[https://www.postgresql.org/docs/9.5/functions-json.html]

---------------------------------------------------
jsonb_array_elements:

select * from jsonb_array_elements('[1, true, [2, false]]')

   value
-----------
 1
 true
 [2,false]
---------------------------------------------------
json_object_keys:

json_object_keys('{"f1": "abc",  "f2": {"f3":"a", "f4":"b"}}')

 json_object_keys
------------------
 f1
 f2
---------------------------------------------------
jsonb_build_object:

SELECT jsonb '{"a":1}' || jsonb_build_object('key', 'value');    => {"a": 1, "key": "value"}
---------------------------------------------------





insert into "UserFitnessData" (userid, nodes) values (2, '{"WeightNode": [{"date": null, "value": 11}, {"date": null, "value": 12}]}'::jsonb);
------------------------------------------------------------------------------------------------
select HealthConditionJs->'IllList'->1 from "UserPersonalData" where userid = 2;
------------------------------------------------------------------------------------------------
INSERT INTO "UserPersonalData" (UserId, HealthConditionJs)
values (2, '{"IllList": ["aaa", "bb"], "Description": "illDescription", "Medications": "medications"}')
ON CONFLICT (UserId) DO UPDATE
    SET HealthConditionJs = (EXCLUDED.HealthConditionJs || '{"IllList": ["aa", "bb"] , "Description": "illDescription", "Medications": "medications"}')::jsonb;
------------------------------------------------------------------------------------------------
INSERT INTO "UserFitnessData" (UserId, Nodes)
values (1, '{"FrontImage": [{"uri":"http://www.g1.com","date":"2021-07-24 18:18:33.000"}]}')
ON CONFLICT (UserId) DO UPDATE
    SET Nodes = jsonb_set("UserFitnessData".Nodes, '{"FrontImage"}',
        coalesce("UserFitnessData".Nodes->'FrontImage', '[]'::jsonb) || '{"uri":"http://www.g1.com","date":"2021-07-29 18:17:43.000"}');
------------------------------------------------------------------------------------------------
INSERT INTO "UserFitnessData" (UserId, Nodes)
values (1, '{"Weight": [{"value":"60","date":"2021-07-26 18:17:33.000"}]}')
ON CONFLICT (UserId) DO UPDATE
    SET Nodes = jsonb_set("UserFitnessData".Nodes, '{"Weight"}',
                          coalesce("UserFitnessData".Nodes->'Weight', '[]'::jsonb) || '{"value":"70","date":"2021-07-26 18:17:43.000"}');
------------------------------------------------------------------------------------------------
UPDATE "UserFitnessData"
SET Nodes = (select jsonb_set(nodes, '{"FrontImage"}', Nodes->'FrontImage' #- '{1}') from "UserFitnessData" where userid = 1)
 where userid = 1;
------------------------------------------------------------------------------------------------
UPDATE "UserFitnessData" SET Nodes = Nodes #- '{"FrontImage", 0}';
------------------------------------------------------------------------------------------------
delete from "UserFitnessData" where 1=1;

select * from "UserFitnessData";

select jsonb_array_elements(nodes->'FrontImage') from "UserFitnessData" where userid = 1;
------------------------------------------------------------------------------------------------
drop PROCEDURE deleteFitnessNodeItemByKey;
call deleteFitnessNodeItemByKey('uri', 'http://www.g2.com', 'FrontImage', 1, 0);
------------------------------------------------------------------------------------------------
ARRAY:

SELECT * FROM FoodMaterial
WHERE id = 2 AND (
            type NOT LIKE 'matter' OR
            (SELECT ARRAY(SELECT jsonb_array_elements(fundamentals_js) ->> 'key') @>
                          array['calories', 'fat', 'protein', 'carbohydrate'])
    );

OLD:

SELECT * FROM FoodMaterial
         WHERE id = 2 AND (
         type NOT LIKE 'matter' OR
         fundamentals_js ?& array['calories', 'fat', 'protein', 'carbohydrate']
         );
------------------------------------------------------------------------------------------------








Samples
=====================================================================================

    [https://dev.to/rap2hpoutre/postgresql-update-objects-deep-in-a-jsonb-structure-a-fast-and-reliable-way-25mb]
    [https://kevcodez.de/posts/2020-09-13-postgres-jsonb-update-object-array/]

--------------------------------------------
 id |    inet    | ports
----+------------+------------
  2 | 1.2.2.1    | {80}
  1 | 1.2.3.4    | {80,12}

select unnest(ports) as port, count(*) from foo group by port;


port  | count
--------+------------
 12     | 1
 80     | 2
=====================================================================================

[
  {
    "id": "c98b53c5",
    "text": "pick a language",
    "choices": [
      {"id": "235d0482", "text": "Rust"},
      {"id": "652ee824", "text": "PHP"},
      {"id": "f543366f", "text": "Forth"}
      // etc.
    ]
  },
  {
    "id": "73294354",
    "text": "pick a frontend framework",
    "choices": [
      {"id": "3feba90d", "text": "React"},
      {"id": "d6aa4dbd", "text": "Vue"},
      {"id": "9beb5da3", "text": "Angular"}
      // etc.
    ]
  },
]

* jsonb_array_elements function expands the array to a set of JSON values,
  with ordinality adds a number (starting from 1, increasing by 1) for each row.


SELECT question, questionIndex FROM survey
 CROSS JOIN jsonb_array_elements(questions) WITH ORDINALITY AS arr(question, questionIndex)
 WHERE id ='8bf9f' AND question->>'id' = '73294354';
................................................................

 WITH questions_table AS (
    SELECT question, questionIndex FROM survey
     CROSS JOIN jsonb_array_elements(questions) WITH ORDINALITY AS arr(question, questionIndex)
    WHERE id = '8bf9fedb' and question->>'id'='73294354'
)

SELECT ('{'|| questionIndex-1 ||',choices,'||choiceIndex-1||'}') AS path
 FROM questions_table
 CROSS JOIN jsonb_array_elements((question->'choices')::jsonb) WITH ORDINALITY AS arr(choice, choiceIndex)
 where choice->>'id'='9beb5da3'
=====================================================================================

SELECT p.name, count(*) AS c FROM  tb AS b, json_array_elements_text(b.people) AS p(name)
GROUP  BY p.name;


SELECT p.name, count(*) AS c FROM tb AS b, json_array_elements_text(b.people) AS p(name)
 WHERE  json_typeof(b.people) = 'array'
GROUP  BY 1;
=====================================================================================
update replace key:

UUPDATE coursebuyquestion
       SET
           questions_js = jsonb_set(questions_js, Array['card_photo'], ${Psql2.castToJsonb(pd.toMap())})
       WHERE user_id = $userId AND course_id = $courseId;
=====================================================================================
update delete key:

UPDATE coursebuyquestion
SET
    questions_js = jsonb_delete_path(questions_js, Array['card_photo']::text[])
WHERE user_id = 101 AND course_id = 2;
=====================================================================================































CREATE OR REPLACE FUNCTION jsonb_update(val1 JSONB,val2 JSONB)
RETURNS JSONB AS $$
DECLARE
    result JSONB;
    v RECORD;
BEGIN
    IF jsonb_typeof(val2) = 'null'
    THEN
        RETURN val1;
    END IF;

    result = val1;

    FOR v IN SELECT key, value FROM jsonb_each(val2) LOOP

        IF jsonb_typeof(val2->v.key) = 'object'
            THEN
                result = result || jsonb_build_object(v.key, jsonb_update(val1->v.key, val2->v.key));
            ELSE
                result = result || jsonb_build_object(v.key, v.value);
        END IF;
    END LOOP;

    RETURN result;
END;
$$ LANGUAGE plpgsql;
==================================================================================================================
# get type of data:

SELECT pg_typeof(fitnessStatusList->'front') FROM "UserData";
===================================================================================================================
bool:

SELECT preferences->'beta' FROM users WHERE (preferences->>'beta')::boolean is true;
===================================================================================================================
SELECT data->'images'->'thumbnail'->'url' AS thumb FROM instagram;
===================================================================================================================
SELECT id, json_string(data, 'name') FROM things
  WHERE json_string(data, 'name') LIKE 'G%';
===================================================================================================================
observersJson := '[]'::json;

	FOR subFetchRecord IN SELECT * FROM "CustomersVsObserver" WHERE customerid = fetchRecord.customerid1 LOOP
		tempJ := ('{"ObserverID": '||subFetchRecord.observerid || ' , "ObserverFullName":"'|| (SELECT concat(name,' ',family) FROM "CommonUsersModel" WHERE userid = subFetchRecord.observerid)||'"}')::json;
		select json_agg(t."value"::JSON) into observersJson from (select * from json_array_elements(observersJson) UNION ALL select tempJ as value) as t;
	END LOOP;


	== Equals by

	SELECT json_agg(
			 JSON_BUILD_OBJECT('ObserverID', observerid, 'ObserverFullName', (SELECT concat(name, ' ', family) FROM "CommonUsersModel"
					WHERE userid = observerid)
					)
				 ) INTO observersJson FROM "CustomersVsObserver" WHERE customerid = fetchRecord.customerid1 ;
===================================================================================================================
